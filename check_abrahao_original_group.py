#!/usr/bin/env python
"""
Script para verificar e corrigir o grupo original do ABRAHAO
"""
import os
import sys
import django
from django.utils import timezone

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'interjornada_system.settings')
django.setup()

from apps.employees.models import Employee, EmployeeGroup
from apps.employee_sessions.models import EmployeeSession

def check_abrahao_original_group():
    """Verifica e corrige o grupo original do ABRAHAO"""
    print("=== VERIFICA√á√ÉO DO GRUPO ORIGINAL DO ABRAHAO ===\n")
    
    # Buscar ABRAHAO
    try:
        abrahao = Employee.objects.get(device_id=1000426)
        print(f"üë§ Funcion√°rio encontrado: {abrahao.name} (ID: {abrahao.device_id})")
        print(f"   - Grupo atual: {abrahao.group}")
        print(f"   - Grupo original: {abrahao.original_group}")
        print(f"   - Ativo: {abrahao.is_active}")
        
        # Verificar sess√£o
        session = EmployeeSession.objects.filter(employee=abrahao).first()
        if session:
            print(f"   - Sess√£o: {session.state}")
            print(f"   - Primeiro acesso: {session.first_access}")
            print(f"   - √öltimo acesso: {session.last_access}")
            if session.return_time:
                print(f"   - Retorna em: {session.return_time}")
        else:
            print(f"   - Sem sess√£o ativa")
        
        # Verificar se est√° na blacklist
        blacklist_group = EmployeeGroup.objects.filter(is_blacklist=True).first()
        if blacklist_group and abrahao.group == blacklist_group:
            print(f"   üö´ EST√Å NA BLACKLIST")
            
            # O problema: n√£o tem grupo original
            if not abrahao.original_group:
                print(f"   ‚ùå PROBLEMA: N√£o tem grupo original salvo")
                
                # Buscar grupo padr√£o
                default_group = EmployeeGroup.objects.filter(name='GRUPO_PADRAO').first()
                if default_group:
                    print(f"   üîß CORRE√á√ÉO: Definindo grupo padr√£o como original")
                    abrahao.original_group = default_group
                    abrahao.save(update_fields=['original_group'])
                    print(f"   ‚úÖ Grupo original definido: {default_group.name}")
                    
                    # Testar restaura√ß√£o
                    print(f"\nüîß Testando restaura√ß√£o da blacklist...")
                    from apps.employees.group_service import group_service
                    restore_success = group_service.restore_from_blacklist(abrahao)
                    
                    if restore_success:
                        print(f"   ‚úÖ ABRAHAO restaurado da blacklist com sucesso!")
                        
                        # Verificar status final
                        abrahao.refresh_from_db()
                        print(f"   - Grupo atual ap√≥s restaura√ß√£o: {abrahao.group}")
                        print(f"   - Grupo original ap√≥s restaura√ß√£o: {abrahao.original_group}")
                        
                        # Verificar sess√£o
                        session = EmployeeSession.objects.filter(employee=abrahao).first()
                        if session:
                            print(f"   - Sess√£o ap√≥s restaura√ß√£o: {session.state}")
                        else:
                            print(f"   - Sess√£o removida ap√≥s restaura√ß√£o")
                    else:
                        print(f"   ‚ùå Falha ao restaurar ABRAHAO da blacklist")
                else:
                    print(f"   ‚ùå Grupo padr√£o n√£o encontrado")
            else:
                print(f"   ‚úÖ Tem grupo original: {abrahao.original_group}")
        else:
            print(f"   ‚úÖ N√ÉO est√° na blacklist")
            
    except Employee.DoesNotExist:
        print("‚ùå ABRAHAO n√£o encontrado no sistema")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print(f"\n=== FIM DA VERIFICA√á√ÉO ===")

if __name__ == "__main__":
    check_abrahao_original_group()
