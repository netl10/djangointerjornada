# Generated by Django 4.2.7 on 2025-10-09 22:31

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="SystemConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "device_ip",
                    models.GenericIPAddressField(
                        default="192.168.1.251",
                        verbose_name="IP do Dispositivo Principal",
                    ),
                ),
                (
                    "device_port",
                    models.PositiveIntegerField(
                        default=443,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                        verbose_name="Porta do Dispositivo Principal",
                    ),
                ),
                (
                    "device_username",
                    models.CharField(
                        default="admin",
                        max_length=100,
                        verbose_name="Usuário do Dispositivo",
                    ),
                ),
                (
                    "device_password",
                    models.CharField(
                        default="admin",
                        max_length=100,
                        verbose_name="Senha do Dispositivo",
                    ),
                ),
                (
                    "secondary_device_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        null=True,
                        verbose_name="IP do Dispositivo Secundário",
                    ),
                ),
                (
                    "secondary_device_port",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                        verbose_name="Porta do Dispositivo Secundário",
                    ),
                ),
                (
                    "secondary_device_username",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        verbose_name="Usuário do Dispositivo Secundário",
                    ),
                ),
                (
                    "secondary_device_password",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        verbose_name="Senha do Dispositivo Secundário",
                    ),
                ),
                (
                    "timezone_offset",
                    models.IntegerField(
                        default=-3,
                        help_text="Ex: -3 para Brasil (UTC-3), 0 para UTC",
                        validators=[
                            django.core.validators.MinValueValidator(-12),
                            django.core.validators.MaxValueValidator(14),
                        ],
                        verbose_name="Offset de Timezone (UTC)",
                    ),
                ),
                (
                    "giro_validation_timeout",
                    models.PositiveIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(60),
                        ],
                        verbose_name="Timeout de Validação de Giro (segundos)",
                    ),
                ),
                (
                    "monitor_interval",
                    models.PositiveIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(60),
                        ],
                        verbose_name="Intervalo de Monitoramento (segundos)",
                    ),
                ),
                (
                    "liberado_minutes",
                    models.PositiveIntegerField(
                        default=480,
                        help_text="Tempo em minutos que o usuário pode acessar livremente",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1440),
                        ],
                        verbose_name="Tempo de Acesso Livre (minutos)",
                    ),
                ),
                (
                    "bloqueado_minutes",
                    models.PositiveIntegerField(
                        default=672,
                        help_text="Tempo em minutos de bloqueio após o acesso",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10080),
                        ],
                        verbose_name="Tempo de Interjornada (minutos)",
                    ),
                ),
                (
                    "exemption_group_name",
                    models.CharField(
                        default="whitelist",
                        help_text="Usuários neste grupo não seguem regras de interjornada",
                        max_length=100,
                        verbose_name="Nome do Grupo de Exceção",
                    ),
                ),
                (
                    "restart_time_1",
                    models.TimeField(
                        blank=True,
                        help_text="Formato: HH:MM (deixe vazio para desabilitar)",
                        null=True,
                        verbose_name="Horário de Reinício 1",
                    ),
                ),
                (
                    "restart_time_2",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Horário de Reinício 2"
                    ),
                ),
                (
                    "restart_time_3",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Horário de Reinício 3"
                    ),
                ),
                (
                    "restart_time_4",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Horário de Reinício 4"
                    ),
                ),
                (
                    "ssl_verify",
                    models.BooleanField(
                        default=False,
                        help_text="Verificar certificados SSL (desabilitar para desenvolvimento)",
                        verbose_name="Verificar SSL",
                    ),
                ),
                (
                    "max_logs_per_request",
                    models.PositiveIntegerField(
                        default=1000,
                        help_text="Limite para não sobrecarregar a catraca",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name="Máximo de Logs por Requisição",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, verbose_name="Configuração Ativa"
                    ),
                ),
            ],
            options={
                "verbose_name": "Configuração do Sistema",
                "verbose_name_plural": "Configurações do Sistema",
                "ordering": ["-updated_at"],
            },
        ),
    ]
